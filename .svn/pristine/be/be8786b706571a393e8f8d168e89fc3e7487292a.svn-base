package com.lk.td.pay.test;

import java.util.HashMap;
import java.util.Map.Entry;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.TextView;
import android.widget.Toast;

import com.td.app.pay.hx.R;
import com.lk.td.pay.activity.BaseFragmentActivity;
import com.lk.td.pay.async.AsyncHttpCilentUtil;
import com.lk.td.pay.async.AsyncHttpResponseHandler;
import com.lk.td.pay.golbal.MApplication;
import com.lk.td.pay.sharedpref.SharedPrefConstant;
import com.lk.td.pay.utils.DataParse;
import com.lk.td.pay.utils.MD5Util;

public class HttpTestActivity extends BaseFragmentActivity implements
		OnClickListener {
	TextView showText;
	private String prdordNo=null;
	private String track=null;//磁道信息
	private String random =null;//随机数   
	private String period=null;//有效期
	private String crdnum=null;//银行卡序列号
	private String termNo=null;//终端号
	private String pinblk=null;//密码密文

	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_test);
				
		MApplication.mSharedPref.putSharePrefString(SharedPrefConstant.USER_MOBILE,
				"13000000000");
		MApplication.mSharedPref.putSharePrefString(SharedPrefConstant.CUSTID,
				"15032400000020");

		findViewById(R.id.button1).setOnClickListener(this);
		findViewById(R.id.button2).setOnClickListener(this);
		findViewById(R.id.button3).setOnClickListener(this);
		findViewById(R.id.button4).setOnClickListener(this);
		findViewById(R.id.button5).setOnClickListener(this);
		findViewById(R.id.button6).setOnClickListener(this);
		findViewById(R.id.button7).setOnClickListener(this);
		findViewById(R.id.button8).setOnClickListener(this);
		findViewById(R.id.button9).setOnClickListener(this);
		findViewById(R.id.button10).setOnClickListener(this);
		findViewById(R.id.button11).setOnClickListener(this);
		findViewById(R.id.button12).setOnClickListener(this);
		findViewById(R.id.button13).setOnClickListener(this);
		findViewById(R.id.button14).setOnClickListener(this);
		findViewById(R.id.button15).setOnClickListener(this);
		findViewById(R.id.button16).setOnClickListener(this); 
		findViewById(R.id.button17).setOnClickListener(this);
		findViewById(R.id.button18).setOnClickListener(this);
		findViewById(R.id.button19).setOnClickListener(this); 
		findViewById(R.id.button20).setOnClickListener(this); 
		showText = (TextView) findViewById(R.id.textView1);

	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.button1:
			getIdentifyingCode();
			break;
		case R.id.button2:
			testIdentifyingCode();
			break;
		case R.id.button3:
			register();
			break;
		case R.id.button4:
			login();
			break;
		case R.id.button5:
			queryMerInfo();
			break;
		case R.id.button6:
			custPwdRevise();
			break;
		case R.id.button7:
			custPwdFind();
			break;
		case R.id.button8:
			logout();
			break;
		case R.id.button9:// 商户实名认证
			//businessiIdentityVerification();
//			startActivityForResult(new Intent(HttpTestActivity.this, RealNameAuthenticationActivity.class), IConstant.CERTIFICATION);
			break;
		case R.id.button10:// 银行卡绑定
			bankCardBind();
			break;
		case R.id.button11:// 版本检测与更新
			versionDetectionAndUpdate();
			break;
		case R.id.button12:// 获取轮循的图片地址
			getRecycleDisplay();
			break;
		case R.id.button13:// 公告查询
			noticeSearch();
			break;
		case R.id.button14:// 获取省市列表
			getProvincesAndCity();
			break;
		case R.id.button15: // 余额查询

			break;
		case R.id.button16: // 终端绑定
			terminalBind();
			break;
		case R.id.button17: // 终端签到
			terminnalSign();
			break;
		case R.id.button18: // 商品下单
			onPrdOrder();
			break;
		case R.id.button19: //支付
			onBankPayment();
			break;
		case R.id.button20: // 银行卡余额查询
			getBalanceCardCheck();
			break;
		}

	}

	private void logout() {
		HashMap<String, String> params = new HashMap<String, String>();
		post("SY0006", params);
	}

	private void custPwdFind() {
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("pwdType", "1");
		params.put("updateType", "2");
		params.put("value", "000000");
		params.put("newPwd", "222222");
		post("SY0005", params);
	}

	private void custPwdRevise() {
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("pwdType", "1");
		params.put("updateType", "1");
		params.put("value", MD5Util.generatePassword("111111"));
		params.put("newPwd", "222222");
		post("SY0005", params);
	}

	private void queryMerInfo() {
		HashMap<String, String> params = new HashMap<String, String>();
		post("SY0004", params);
	}

	private void login() {
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("custPwd", "111111");
		post("SY0003", params);
	
	}

	private void testIdentifyingCode() {
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("codeType", "01");
		params.put("msgCode", "000000");
		post("SY0013", params);
	}

	private void getIdentifyingCode() {
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("codeType", "01");
		post("SY0001", params);
	}

	private void register() {
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("custPwd", "111111");
		params.put("custName", "陆克俊");
		params.put("certificateNo", "340823198802144413");
		post("SY0002", params);
	}
	
	/**
	 * 商家实名认证
	 */
	private void businessiIdentityVerification(){
		
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("cardHandheld", getResources().getDrawable(R.drawable.ic_launcher).toString());
		params.put("cardFront", getResources().getDrawable(R.drawable.ic_launcher).toString());
		params.put("cardBack", getResources().getDrawable(R.drawable.ic_launcher).toString());
		post("SY0007", params);
		
	}
	
	/**
	 * 银行卡绑定
	 */
	private void bankCardBind(){
		
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("operType", "1");//操作类型：1-银行卡绑定；2-银行卡信息修改；3-设为默认银行卡，4-解绑(删除)N
		params.put("oldCardNo", "6228480402564890018");//原银行卡号 Y
		params.put("cardNo", "6228480402637874213");//银行卡号   N
		params.put("cardFront", "");//银行卡正面照片 Y
		params.put("cardBack", "");//银行卡背面照片 Y
		params.put("provinceId", "");//银行卡所属省份Id Y
		params.put("cityId", "");//银行卡开户城市Id Y
		params.put("cnapsCode", "");//联行号 Y
		post("SY0008", params);
		
	}

	/**
	 * 公告查询
	 */
	private void noticeSearch() {

		HashMap<String, String> params = new HashMap<String, String>();
		params.put("pageSize", "1");
		params.put("lastId", "000000003");
		post("SY0011", params);

	}
	
	/**
	 * 获取省市列表
	 */
	private void getProvincesAndCity(){
		
		HashMap<String, String> params = new HashMap<String, String>();
		post("SY0012", params);
		
	}

	/**
	 * 获取图片的链接
	 */
	private void getRecycleDisplay() {

		HashMap<String, String> params = new HashMap<String, String>();
		post("SY0010", params);

	}
	
	/**
	 * 银行卡余额查询
	 */
	private void getBalanceCardCheck(){
		
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("termNo", termNo);//终端号
		params.put("termType", "02");
		params.put("track", track);//磁道信息
		params.put("pinblk", pinblk);//密码密文
		params.put("random", random);//随机数
		params.put("mediaType", "01");//介质类型
		params.put("period", "02");//有效期
		params.put("icdata", "02");//55域
		params.put("crdnum", crdnum);//卡片序列号
		params.put("mac", "");
		post("PY0003", params);
		
	}

	/**
	 * 版本检测与更新
	 */
	private void versionDetectionAndUpdate() {

		HashMap<String, String> params = new HashMap<String, String>();
		post("SY0009", params);

	}

	/**
	 * 终端绑定
	 */
	private void terminalBind(){
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("termNo", "78621154");
		post("TE0001", params);
//		startActivityForResult(new Intent(HttpTestActivity.this, SwingCardActivity.class),IConstant.TERMINAL_BIND);
		
	}
	
	/**
	 * 终端签到
	 */
	private void terminnalSign(){		
		
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("termNo", termNo);
		params.put("termType","02");//01蓝牙、02音频
		post("SG0002", params);
		
	}
	
	/**
	 * 商品下单
	 */
	private void onPrdOrder(){
		
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("prdordType", "01");//订单类型
		params.put("bizType", "");
		params.put("prdordAmt", "100");//订单金额
		post("OD0001", params);
		
	}
	
	/**
	 * 支付
	 */
	private void onBankPayment(){
		
		if(!TextUtils.isEmpty(pinblk)){
			
//			pinblk=PinDes.pinResultMak(PinDes.ZMK, pinblk, "", "123456");
			HashMap<String, String> params = new HashMap<String, String>();
			params.put("prdordNo", prdordNo);//商品订单号
			params.put("payType", "02");//支付方式
			params.put("rate", "1");//费率类型
			params.put("termNo", termNo);//终端号
			params.put("termType", "02");//终端类型
			params.put("payAmt", "100");//交易金额
			params.put("track", track);//磁道信息
			params.put("pinblk", pinblk);//密码密文
			params.put("random", random);//随机数
			params.put("mediaType", "01");//介质类型
			params.put("period", period);//有效期有效期
			params.put("icdata", "");//55域ICDATA
			params.put("crdnum", crdnum);//卡片序列号
			params.put("mac", "");//Mac	
			post("PY0001", params);
			
		}else{
			
			Toast.makeText(HttpTestActivity.this, "zmakkey为空!", Toast.LENGTH_SHORT).show();
			
		}
		
	}
	
	private void post(String url, HashMap<String, String> params) {
		AsyncHttpCilentUtil.getInstance().post(
				"http://192.168.0.232:8098/mpcctp/" + url + ".json", params,
				new AsyncHttpResponseHandler() {
					@Override
					public void onStart() {
						showLoadingDialog();
					}

					@Override
					public void onFinish() {
						dismissLoadingDialog();
					}

					@Override
					public void onSuccess(String content) {
						HashMap<String, Object> result = DataParse
								.getInstance().parse(content);
						System.out.println("response-->" + result.get("RSPMSG"));
						StringBuilder sb = new StringBuilder();
						for (Entry<String, Object> entry : result.entrySet()) {
							if(entry.getKey().equals("prdordNo")){
								prdordNo=(String) entry.getValue();
							}else if(entry.getKey().equals("zmakkey")){
								
								pinblk=(String) entry.getValue();
								
							}
							sb.append(entry.getKey() + "-->" + entry.getValue()
									+ "\n");
						}
						showText.setText(sb.toString());
					}

					@Override
					public void onFailure(Throwable error, String content) {
						System.out.println("error-->" + content);
						showText.setText(content);
					}
				});
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		
		if(requestCode==IConstant.CERTIFICATION&&resultCode==IConstant.CERTIFICATION_FLAG){
			
			showText.setText(data.getStringExtra("RETURN_VALUE"));
			
		}else if(requestCode==IConstant.TERMINAL_BIND&&resultCode==IConstant.TERMINAL_BIND_FLAG){
			
			
			termNo=data.getStringExtra("TER_VALUE");
			random=data.getStringExtra("RANDOM_VALUE");
			track=data.getStringExtra("TRACE_VALUE");
			period=data.getStringExtra("PERIOD_VALUE");
			crdnum=data.getStringExtra("CRDNUM_VALUE");
			
			if(!TextUtils.isEmpty(termNo)){
				
				HashMap<String, String> params = new HashMap<String, String>();
				params.put("termNo", termNo);
				post("TE0001", params);
				
			}else{
				
					
					Toast.makeText(HttpTestActivity.this, "获取设备号失败", Toast.LENGTH_SHORT).show();
					
				
			}
				
				
		}
	}
}
