package com.lk.td.pay.activity;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.lk.td.pay.beans.BasicResponse;
import com.lk.td.pay.beans.PosData;
import com.lk.td.pay.golbal.MApplication;
import com.lk.td.pay.golbal.Urls;
import com.lk.td.pay.sharedpref.SharedPrefConstant;
import com.lk.td.pay.tool.Logger;
import com.lk.td.pay.tool.MyHttpClient;
import com.lk.td.pay.tool.T;
import com.lk.td.pay.utils.AmountUtils;
import com.lk.td.pay.utils.PinDes;
import com.lk.td.pay.utils.Utils;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.td.app.pay.hx.R;
import com.whty.comm.inter.ICommunication;
import com.whty.tymposapi.DeviceApi;

import org.apache.http.Header;
import org.json.JSONArray;
import org.json.JSONException;

import java.util.HashMap;

public class CashInConfirmActivity extends BaseActivity implements
        OnClickListener {

    private TextView cardNoText, payAmtText, payRateText;
    private EditText cardPwdEdit;
    private String cardPwd;
    private Context mContext;
    private String[] rates;
    private LinearLayout ll_display;
    /**
     * 设备购买
     */
    public static final String ACTION_BUY_DEVICE = "9";
    /**
     * 收款
     */
    public static final String ACTION_CASH_IN = "8";
    private String action;

    private String[] ratess = null;
    private String[] ratesDesc = null;
    private String rate = null;

    private String scancardnum;
    private String scanornot;
    private DeviceApi deviceApi;


    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.cashin_confirm);
        mContext = this;
        action = getIntent().getAction() == null ? "" : getIntent().getAction();
        scancardnum = getIntent().getStringExtra("scancardnum");
        scanornot = getIntent().getStringExtra("scanornot");
        init();
        getBindDevice();
    }

    private void init() {
        deviceApi = new DeviceApi(getApplicationContext());

        cardNoText = (TextView) findViewById(R.id.cashin_card_no_text);
        payAmtText = (TextView) findViewById(R.id.cashin_pay_amt_text);
        cardPwdEdit = (EditText) findViewById(R.id.cash_bank_pwd_edit);
        cardNoText
                .setText(Utils.hiddenCardNo(PosData.getPosData().getCardNo()));
        payAmtText.setText(AmountUtils.changeFen2Yuan(PosData.getPosData()
                .getPayAmt()) + "元");
        payRateText = (TextView) findViewById(R.id.cashin_pay_rate_text);
        payRateText.setOnClickListener(this);
        findViewById(R.id.btn_back).setOnClickListener(this);
        findViewById(R.id.cashin_confirm_btn).setOnClickListener(this);
        ll_display = (LinearLayout) findViewById(R.id.ll_display);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.cashin_confirm_btn:

                if (rate == null) {
                    T.ss("请选择费率类型");
                    return;
                }
                cardPwd = cardPwdEdit.getText().toString().trim();
                if (TextUtils.isEmpty(cardPwd)) {
                    showDialog(getResources().getString(R.string.inputbankCardPwd));
                } else if (cardPwd.length() != 6) {
                    showDialog("银行卡密码长度应为6位数");
                } else {
                    if (null == MApplication.mSharedPref.getSharePrefString(
                            SharedPrefConstant.CITY_NAME) || "" == MApplication.mSharedPref.getSharePrefString(
                            SharedPrefConstant.CITY_NAME)) {
                        showAlert();
                    } else {
//                    if (deviceApi.isConnected()) {
//                        goPay("");
//                    }else {
                        downloadPineky();
//                    }
                    }
                }
                break;
            case R.id.btn_back:
                goMainActivity();
                break;
            case R.id.cashin_pay_rate_text:
                queryRate();
                break;
            default:
                break;
        }

    }

    private void showAlert() {
        new AlertDialog.Builder(context)
                .setTitle("温馨提示")
                .setMessage("获取位置信息失败，请设置允许方位定位")
                .setPositiveButton("确定", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        finish();
                    }
                }).create().show();
    }

    @Override
    public boolean dispatchKeyEvent(KeyEvent event) {
        if (event.getAction() == KeyEvent.ACTION_DOWN
                && event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
            goMainActivity();
            return false;
        } else {
            return super.dispatchKeyEvent(event);
        }
    }

    private void goMainActivity() {
        Intent it = new Intent(this, MainTabActivity.class);
        it.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        it.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
        startActivity(it);

    }

    private void goPay(String pinkey) {
        try {
//            cardPwd = PinDes.pinResultMak(PinDes.ZMK, pinkey, PosData.getPosData().getCardNo(), cardPwd);
//            if(deviceApi.isConnected()) {
//                cardPwd = deviceApi.getEncPinblock(cardPwd);
//            }else {
            cardPwd = PinDes.pinResultMak(PinDes.ZMK, pinkey, PosData.getPosData().getCardNo(), cardPwd);
//            }
        } catch (Exception e) {

        }
        HashMap<String, String> params = new HashMap<String, String>();
        params.put("prdordNo", PosData.getPosData().getPrdordNo());
        params.put("payType", PosData.getPosData().getPayType());
        params.put("rateType", rate);
        params.put("termNo", PosData.getPosData().getBluetoothTermNo());
        params.put("termType", PosData.getPosData().getTermType());
        params.put("payAmt", PosData.getPosData().getPayAmt());
        params.put("track", PosData.getPosData().getTrack());
        params.put("pinblk", cardPwd);
        params.put("random", PosData.getPosData().getRandom());
        params.put("mediaType", PosData.getPosData().getMediaType());
        params.put("period", PosData.getPosData().getPeriod());
        params.put("icdata", PosData.getPosData().getIcdata());
        params.put("crdnum", PosData.getPosData().getCrdnum());
        params.put("mac", "");
        params.put("scancardnum", scancardnum);
        params.put("scanornot", scanornot);
        params.put("address", MApplication.mSharedPref.getSharePrefString(
                SharedPrefConstant.CITY_NAME));
        System.out.println("======================================>" + params.toString());

        MyHttpClient.post(mContext, Urls.TRADE_PAY,
                params, new AsyncHttpResponseHandler() {

                    @Override
                    public void onSuccess(int statusCode, Header[] headers,
                                          byte[] responseBody) {
                        Logger.json(responseBody);
                        try {
                            BasicResponse r = new BasicResponse(responseBody).getResult();
                            System.out.println("=====>" + new String(responseBody));
                            if (r.isSuccess()) {
                                PosData.getPosData().clearPosData();
                                Intent it = new Intent(mContext, ShowMsgActivity.class);
                                it.setAction("ACTION_CASH_IN");
                                it.putExtra("code", r.isSuccess());
                                it.putExtra("msg", r.getMsg());
                                startActivity(it);
                                finish();
                            } else {
                                PosData.getPosData().clearPosData();
                                Intent it = new Intent(mContext, ShowMsgActivity.class);
                                it.setAction("ACTION_CASH_IN");
                                it.putExtra("code", r.isSuccess());
                                it.putExtra("msg", r.getMsg());
                                startActivity(it);
                                finish();
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                            showDialog("数据解析失败");
                        }

                    }

                    @Override
                    public void onFailure(int statusCode, Header[] headers,
                                          byte[] responseBody, Throwable error) {
                        networkError(statusCode, error);
                    }

                    @Override
                    public void onStart() {
                        super.onStart();
                        showLoadingDialog();
                    }

                    @Override
                    public void onFinish() {
                        super.onFinish();
                        dismissLoadingDialog();
                    }
                });
    }

    private void queryRate() {
        Dialog dialog = new AlertDialog.Builder(this)
                .setTitle("选择费率类型")
                .setSingleChoiceItems(ratesDesc, 0,
                        new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog,
                                                int which) {
                                try {
                                    rate = ratess[which];
                                    System.err
                                            .println("---------------------->>>"
                                                    + rate);
                                    payRateText.setText(ratesDesc[which]);
                                    dialog.dismiss();
                                } catch (Exception e) {
                                    // TODO 自动生成的 catch 块
                                    e.printStackTrace();
                                }

                            }
                        }).create();
        dialog.show();
    }

    private void getBindDevice() {
        HashMap<String, String> params = new HashMap<String, String>();
        params.put("termNo", PosData.getPosData().getTermNo());
        MyHttpClient.post(this, Urls.TERM_DEVICE_LIST, params,
                new AsyncHttpResponseHandler() {

                    @Override
                    public void onSuccess(int statusCode, Header[] headers,
                                          byte[] responseBody) {
                        Logger.json(responseBody);
                        try {
                            BasicResponse res = new BasicResponse(responseBody)
                                    .getResult();
                            if (res.isSuccess()) {
                                JSONArray array = res.getJsonBody()
                                        .getJSONArray("rateList");
                                ratess = new String[array.length()];
                                ratesDesc = new String[array.length()];
                                for (int i = 0; i < array.length(); i++) {
                                    ratess[i] = array.getJSONObject(i)
                                            .optString("rateNo");
                                    ratesDesc[i] = array.getJSONObject(i)
                                            .optString("rateDesc");
                                }
                                if (ratesDesc.length != 0) {
                                    payRateText.setText(ratesDesc[0]);
                                    rate = ratess[0];
                                } else {
                                    payRateText.setText("该终端没有设置费率");
                                    payRateText.setEnabled(false);
                                }


                            } else {
                                T.ss(res.getMsg());
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                    }

                    @Override
                    public void onFailure(int statusCode, Header[] headers,
                                          byte[] responseBody, Throwable error) {
                        networkError(statusCode, error);
                    }

                    @Override
                    public void onFinish() {
                        super.onFinish();
                        dismissLoadingDialog();
                    }

                    @Override
                    public void onStart() {
                        super.onStart();
                        showLoadingDialog();
                    }
                });
    }

    private void downloadPineky() {
        System.out.println("======================================>" + rate);

        // 终端签到
        HashMap<String, String> params = new HashMap<String, String>();
        params.put("termNo", PosData.getPosData().getTermNo());
        params.put("termType", PosData.getPosData().getTermType());
        MyHttpClient.post(this, Urls.BLUETOOTH_SIGN, params,
                new AsyncHttpResponseHandler() {

                    @Override
                    public void onSuccess(int statusCode, Header[] headers,
                                          byte[] responseBody) {
                        try {
                            BasicResponse re = new BasicResponse(responseBody)
                                    .getResult();
                            if (re.isSuccess()) {
                                String pinkey = re.getJsonBody().optString(
                                        "zpinkey");
                                goPay(pinkey);
                            } else {
                                showDialog(re.getMsg());
                            }
                        } catch (JSONException e) {

                            e.printStackTrace();
                        }
                    }

                    @Override
                    public void onFailure(int statusCode, Header[] headers,
                                          byte[] responseBody, Throwable error) {
                        networkError(statusCode, error);
                    }

                    @Override
                    public void onStart() {
                        super.onStart();
                        showLoadingDialog();
                    }

                    @Override
                    public void onFinish() {
                        super.onFinish();
                        dismissLoadingDialog();
                    }
                });
    }

}