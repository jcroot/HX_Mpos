/**
 * 功能：全局变量
 * 类名：TCPayApplication.java
 * 日期：2013-11-26
 * 作者：lukejun
 */
package com.lk.td.pay.golbal;

import android.app.Application;
import android.content.Context;

import com.lk.td.pay.beans.BasicResponse;
import com.lk.td.pay.sharedpref.SharedPref;
import com.lk.td.pay.sharedpref.SharedPrefConstant;
import com.lk.td.pay.tool.MyHttpClient;
import com.lk.td.pay.tool.T;
import com.lk.td.pay.tool.UnCeHandle;
import com.lk.td.pay.tool.store.Hawk;
import com.lk.td.pay.utils.Logger;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;

import org.apache.http.Header;
import org.json.JSONException;

import java.lang.Thread.UncaughtExceptionHandler;
import java.util.HashMap;


/**
 * @author lukejun
 * @ClassName: TCPayApplication
 * @Description: 全局变量
 * @date 2013-11-26 下午1:32:44
 */
public class MApplication extends Application implements UncaughtExceptionHandler {

    private static MApplication mApplication = null;
    public static SharedPref mSharedPref = null;
    public int screenWidth = 0;
    public int screenHeight = 0;
    private Context mainHomeContext = null;
    private User user = new User();

    @Override
    public void onCreate() {
        super.onCreate();
        mApplication = this;
        Hawk.init(mApplication);
        mSharedPref = SharedPref
                .getInstance(SharedPrefConstant.PREF_NAME, this); // 单例sp
        UnCeHandle unCatch = new UnCeHandle(this);
        Thread.setDefaultUncaughtExceptionHandler(unCatch);
        initImageLoader(getApplicationContext());
    }

    public static MApplication getInstance() {
        /*if(null==mApplicationContext){
			mApplicationContext=new MApplication();
		}*/
        return mApplication;
    }

    /**
     * 获取主页面Context
     * 用于在activity外部启动或调用
     */
    public void setmainHomeContext(Context context) {
        this.mainHomeContext = context;
    }

    public Context getMainHomeContext() {
        return mainHomeContext;
    }

    public boolean chechStatus() {
        if (User.uStatus == 2) {
            return true;
        } else if (User.uStatus == 1) {
            T.ss("实名认证审核中");
            return false;
        } else if (User.uStatus == 0) {
            T.ss("尚未实名认证");
            return false;
        } else if (User.uStatus == 3) {
            T.ss("实名认证未通过");
            return false;
        }
        return false;
    }

    /**
     * 清除用户状态信息
     * <h1>不清除会导致登录用户状态错误</h1>
     */
    public void clearSavedInfo() {
        User.uAccount = null;
        User.login = false;
        User.uName = null;
        User.cardNum = 0;
        User.termNum = 0;
        User.uId = null;
        User.uStatus = 0;
        User.bindStatus = 0;
        User.amtT0 = null;
        User.amtT1 = null;
        User.bindDevices = null;
        User.totalAmt = null;
        User.cardInfo = null;
        //MApplication.mSharedPref.clear();
    }

    public void refreshUserInfo() {
        System.out.println("刷新用户信息");
        HashMap<String, String> params = new HashMap<String, String>();
        MyHttpClient.post(mApplication, Urls.GET_USER_INFO, params, new AsyncHttpResponseHandler() {

            @Override
            public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
                System.out.println("刷新用户信息---");
                try {
                    BasicResponse r = new BasicResponse(responseBody).getResult();
                    if (r.isSuccess()) {
                        User.uStatus = r.getJsonBody().optInt("custStatus");
                        User.termNum = r.getJsonBody().optInt("termNum");
                        User.cardNum = r.getJsonBody().optInt("cardNum");
                        User.cardBundingStatus = r.getJsonBody().optInt("cardBundingStatus");
                    } else {
                    }
                } catch (JSONException e) {
                    // TODO 自动生成的 catch 块
                    e.printStackTrace();
                }

            }

            @Override
            public void onFailure(int statusCode, Header[] headers,
                                  byte[] responseBody, Throwable error) {
                // TODO 自动生成的方法存根

            }
        });
    }
	
	/*public void removeActivity(Activity activity) {
		activityList.remove(activity);
	}

	public void addActivity(Activity activity) {
		activityList.add(activity);
	}

	*/

    /**
     * @Title: finishAllActivity
     * @Description: 退出应用, 关闭所有activity
     *//*
	public void finishAllActivity() {
		for (Activity activity : activityList) {
			if (null != activity) {
				activity.finish();
			}
		}
	}

	public void finishInitActivity() {

		for (int i = 0; i < activityList.size(); i++) {
			if (activityList.get(i).getLocalClassName().equals("InitActivity")) {
				activityList.get(i).finish();
				activityList.remove(i);
			}
		}
	}
	
	public void finishActivity(Activity activity){
		if(activity!=null){
			activityList.remove(activity);
			activity.finish();
			activity=null;
		}
	}*/
    @Override
    public void uncaughtException(Thread thread, Throwable ex) {

        Logger.d("Test", "system crush!!!");
        android.os.Process.killProcess(android.os.Process.myPid());

    }

    public int getScreenWidth() {
        return screenWidth;
    }

    public void setScreenWidth(int screenWidth) {
        this.screenWidth = screenWidth;
    }

    public int getScreenHeight() {
        return screenHeight;
    }

    public void setScreenHeight(int screenHeight) {
        this.screenHeight = screenHeight;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    private void initImageLoader(Context context) {
        ImageLoaderConfiguration configuration = ImageLoaderConfiguration
                .createDefault(this);
        ImageLoader.getInstance().init(configuration);
    }

}
