package com.lk.td.pay.fragment;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;

import com.lk.td.pay.activity.AccountWithdrawActivity;
import com.lk.td.pay.activity.CashInActivity;
import com.lk.td.pay.activity.NoticeActivity;
import com.lk.td.pay.activity.RealNameAuthenticationActivity;
import com.lk.td.pay.activity.swing.ty.bluetooth.SwingCardByTYBluetootchActivity;
import com.lk.td.pay.activity.swing.xdl.SwingXDLCardBalanceActivity;
import com.lk.td.pay.activity.swing.xdl.bluetootch.SwingCardByXDLBluetootchActivity;
import com.lk.td.pay.beans.BasicResponse;
import com.lk.td.pay.beans.PosData;
import com.lk.td.pay.golbal.Actions;
import com.lk.td.pay.golbal.MApplication;
import com.lk.td.pay.golbal.Urls;
import com.lk.td.pay.golbal.User;
import com.lk.td.pay.tool.Logger;
import com.lk.td.pay.tool.MyHttpClient;
import com.lk.td.pay.tool.T;
import com.lk.td.pay.wedget.flashview.EffectConstants;
import com.lk.td.pay.wedget.flashview.FlashView;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.td.app.pay.hx.R;

import org.apache.http.Header;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class MainFragment extends BaseFragment implements OnClickListener {

    private int[] ids = new int[]{R.id.notice_main,
            R.id.function_cash_in,
            R.id.function_group_buy,
            R.id.function_life,
            R.id.function_phone_recharge, R.id.function_query_balance,
            R.id.function_scenic_ticket, R.id.function_sign,
            R.id.function_team_travel,
            R.id.function_transfer, R.id.function_aqaa, R.id.function_lifefee, R.id.function_planee};
    private View view;
    private FlashView flash;
    private List<String> imgs = new ArrayList<String>();
    private final String[] type = {"新大陆音频刷卡器", "新大陆蓝牙刷卡器", "天喻蓝牙刷卡器"};

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //imgs.add("http://210.22.153.30:8098/mpcctp/file/upload/attachment/150421/150421000462.png");
        //imgs.add("http://210.22.153.30:8098/mpcctp/file/upload/attachment/150424/150424000617.jpg");
        loadNotice();
        loadAuth();
    }

    private void getAdUrl() {
        HashMap<String, String> params = new HashMap<String, String>();
        params.put("custId", User.uId);
        params.put("custMobile", User.uAccount);
        MyHttpClient.post(getActivity(), Urls.MAIN_AD_IMG,
                params, new AsyncHttpResponseHandler() {

                    @Override
                    public void onSuccess(int statusCode, Header[] headers,
                                          byte[] responseBody) {
                        Logger.json(responseBody);
                        try {
                            BasicResponse json = new BasicResponse(responseBody)
                                    .getResult();
                            if (json.isSuccess()) {
                                JSONArray array = json.getJsonBody()
                                        .optJSONArray("imgList");
                                for (int i = 0; i < array.length(); i++) {
                                    String temp = array.getJSONObject(i)
                                            .optString("appimgPath");
                                    if (!TextUtils.isEmpty(temp)) {
                                        imgs.add(Urls.ROOT_URL + temp);
                                    }
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }

                    @Override
                    public void onFailure(int statusCode, Header[] headers,
                                          byte[] responseBody, Throwable error) {
                    }

                    @Override
                    public void onFinish() {
                        super.onFinish();
                        initView();
                    }
                });

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        view = inflater.inflate(R.layout.fragment_main_layout, null);
        getAdUrl();
        return view;
    }

    private void initView() {
        for (int i = 0; i < ids.length; i++) {
            view.findViewById(ids[i]).setOnClickListener(this);
        }
        flash = (FlashView) view.findViewById(R.id.cycleview_main);
        flash.setImageUris(imgs);
        flash.setEffect(EffectConstants.DEFAULT_EFFECT);
    }

    @Override
    public void onClick(View v) {
        Intent intent = new Intent();
        switch (v.getId()) {
            case R.id.function_cash_in:
                if (MApplication.getInstance().chechStatus())//实名认证
                    if (User.termNum == 0) {//绑定刷卡器
                        T.ss("请先绑定刷卡器！");
                        return;
                    } else {
                        intent.setClass(getActivity(), CashInActivity.class).setAction(CashInActivity.ACTION_T1);
                        startActivity(intent);
                    }
                else {
                    return;
                }
                break;
            case R.id.notice_main:
                intent.setClass(getActivity(), NoticeActivity.class);
                startActivity(intent);
                break;
            case R.id.function_query_balance:
                if (MApplication.getInstance().chechStatus())//实名认证
                    if (User.termNum == 0) {//绑定刷卡器
                        T.ss("请先绑定刷卡器！");
                        return;
                    } else {
                        bindDevice();
                    }
                else {
                    return;
                }
                break;
            case R.id.function_aqaa:
//                Intent intentTack = new Intent(context, BankScanCamera.class);
//                intentTack.putExtra("BankAPP", 10011);
//                startActivity(intentTack);

                if (User.cardBundingStatus != 2) {
                    com.lk.td.pay.tool.T.ss("请绑定银行卡通过后再操作");
                    return;
                }
                if (MApplication.getInstance().chechStatus())
                    startActivity(new Intent(getActivity(),
                            AccountWithdrawActivity.class));
                else
                    return;
                break;
            default:
                T.ss("尚未开通.");
                break;
            // break;
        }


    }

    private void bindDevice() {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setTitle("请选择刷卡器的类型");
        builder.setItems(type, new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface arg0, int position) {
                // 根据选择的刷卡器类型决定跳转到哪个页面
                switch (position) {
                    case 0:
                        startActivity(new Intent(getActivity(),
                                SwingXDLCardBalanceActivity.class).setAction(Actions.ACTION_QUERY_BALANCE));
                        break;
                    case 1:
                        PosData.getPosData().setActtext("ACTION_QUERY_BALANCE");
                        startActivity(new Intent(getActivity(),
                                SwingCardByXDLBluetootchActivity.class).setAction(Actions.ACTION_QUERY_BALANCE));
                        break;
                    case 2:
                        PosData.getPosData().setActtext("ACTION_QUERY_BALANCE");
                        startActivity(new Intent(getActivity(),
                                SwingCardByTYBluetootchActivity.class).setAction(Actions.ACTION_QUERY_BALANCE));
                        break;
                    default:
                        break;
                }
            }
        });
        builder.create().show();
    }

    private void loadNotice() {
        HashMap<String, String> params = new HashMap<>();
        params.put("pageSize", 10 + "");
        params.put("start", "0");
        params.put("noticeStatus", "1");  //紧急公告
        MyHttpClient.post(context, Urls.SYSTEM_MESSAGE, params,
                new AsyncHttpResponseHandler() {

                    @Override
                    public void onSuccess(int statusCode, Header[] headers,
                                          byte[] responseBody) {
                        String response = new String(responseBody);
                        Logger.json(response);

                        try {
                            BasicResponse result = new BasicResponse(responseBody).getResult();
                            if (result.isSuccess()) {
                                JSONObject jsonOneBody = result.getJsonBody();
                                JSONArray array = jsonOneBody.getJSONArray("noticeList");
                                for (int i = 0; i < array.length(); i++) {
                                    JSONObject temp = array.getJSONObject(i);
                                    String noticeId = temp.optString("noticeId");
                                    String message = temp.optString("noticeBody");
                                    String noticeTitle = temp.optString("noticeTitle");
                                    showNoticeDialog(noticeId, noticeTitle, message);
                                }
                            } else {
                                showToast(result.getMsg());
                            }
                        } catch (JSONException e) {
                            // TODO 自动生成的 catch 块
                            e.printStackTrace();
                        }
                    }

                    @Override
                    public void onFailure(int statusCode, Header[] headers,
                                          byte[] responseBody, Throwable error) {
                        networkError(statusCode, error);
                    }

                    @Override
                    public void onStart() {
                        super.onStart();
                        showLoadingDialog();
                    }

                    @Override
                    public void onFinish() {
                        super.onFinish();
                        dismissLoadingDialog();
                    }
                });
    }

    private void showNoticeDialog(final String noticeId, String noticeTitle, String message) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setTitle(noticeTitle);
        builder.setMessage(message);
        builder.setNegativeButton(getString(R.string.no_tips), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                setMessage(User.uId, noticeId);
                dialog.dismiss();
            }
        });
        builder.setPositiveButton(getString(R.string.go_to), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                Intent intent = new Intent();
                intent.setClass(getActivity(), NoticeActivity.class);
                startActivity(intent);
                dialog.dismiss();
            }
        });
        builder.create().show();
    }


    private void setMessage(String id, String noticeId) {
        HashMap<String, String> params = new HashMap<>();
        params.put("Id", id);
        params.put("noticeId", noticeId);
        MyHttpClient.post(context, Urls.SET_MESSAGE, params,
                new AsyncHttpResponseHandler() {

                    @Override
                    public void onSuccess(int statusCode, Header[] headers,
                                          byte[] responseBody) {
                        String response = new String(responseBody);
                        Logger.json(response);
                    }

                    @Override
                    public void onFailure(int statusCode, Header[] headers,
                                          byte[] responseBody, Throwable error) {
                        networkError(statusCode, error);
                    }

                    @Override
                    public void onStart() {
                        super.onStart();
                        showLoadingDialog();
                    }

                    @Override
                    public void onFinish() {
                        super.onFinish();
                        dismissLoadingDialog();
                    }
                });
    }

    private void loadAuth(){
        if (User.uStatus == 0) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
            builder.setTitle(getString(R.string.tip));
            builder.setMessage(getString(R.string.no_authentication));
            builder.setPositiveButton(getString(R.string.go_to_authentication),
                    new DialogInterface.OnClickListener() {

                        public void onClick(DialogInterface dialog,
                                            int which) {
                            dialog.cancel();
                            getActivity().startActivity(
                                    new Intent(getActivity(),
                                            RealNameAuthenticationActivity.class));
                        }
                    });
            AlertDialog dialog = builder.create();
            dialog.show();
            return;
        }
    }
}
